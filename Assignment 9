Question 1: Briefly describe the concept of "Stack Frame" (1 through 5 points depending on quality of the answer)
A stack frame is a collection of data that is associated with the current subroutine that the program is on. The collection
can include the return address, local variables that the subroutine may have, arguments passed, etc.

Question 2: Briefly describe the concept of a "Calling Convention" (1 through 5 points depending on quality of the answer)
Calling conventions are low level plans for how different program instructions take in parameters from the code, how they return 
values from a function and how it manages the stack and stack frame.

Question 3: Why do the book examples always start functions with "push ebp" and "mov ebp,esp" (2 points)
Functions always start with these instructions because they want to save the value of whatever ebp was and then point to the 
top of the stack with the mov ebp, esp.

Question 4: What is the x64 equivalent to "push epb" and "mov ebp,esp" (2 points)
The x64 equivalent for both instructions are:
push rpb
mov rbp,rsp

Question 5: What are the differences between "Microsoft x64 calling convention" and "System V AMD64 ABI calling convention?" 
(2 points)
One differenceSystem V AMD64 ABI can take more parameters to be put into registers, and those registers that take in the parameters 
are differentthan Microsoft x64. Another difference is that System V AMD64 ABI does not include shadow space on function entry.

For Questions 6 and 7, reference
void myFunction(int a, int b, int c, int d, int e, int f)  
{
  //some code here
}

Question 6: Upon entry to myFunction (above), what does the stack look like when using Microsoft x64 calling convention? (3 points)
From the above function, the first four parameters will be pushed into separate registers:
a into RCX, b into RDX, c into r8, and d into r9. As for e and f, they will be pushed onto the stack from right to left.

Question 7: Upon entry to myFunction (above), what does the stack look like when using stdcall convention (3 points)
From the above function, the parameters are going to be pushed onto the stack from right to left, so starting from f and 
going all the way to a.
